#compdef _cmux cmux
# CMUX interactive command completion for Z Shell

# Set FZF_DEFAULT_OPTS
_fzf_default_opts="
$FZF_DEFAULT_OPTS
--no-multi
--inline-info
--reverse
"

# Count lines of the text
#
# Globals:
#   None
# Arguments:
#   $1 line count
# Returns:
#   fzf height
cmux::fzf::height() {
  echo $(($1+2))
}

# Select CMUX command
#
# Globals:
#   _fzf_default_opts fzf_query_str
# Arguments:
#   None
# Returns:
#   CMUX command
cmux::commands() {
  local cmux_cmds

  cmux_cmds=(
    "${(@f)$(
      cmux |
      sed $'s/\xc2\xa0/ /g' |
      sed '1,/Commands:$/d;/^$/,$d;s/^ *//g'
    )}"
  )

  printf '%s\n' "${cmux_cmds[@]}" |
  FZF_DEFAULT_OPTS="$_fzf_default_opts" \
  fzf --header="COMMANDS" \
      --query="$fzf_query_str" \
      --height="$(cmux::fzf::height "${#cmux_cmds[@]}")" |
  awk '{print $1}'
}

# Select CMUX command option
#
# Globals:
#   current _fzf_default_opts comp_words
# Arguments:
#   None
# Returns:
#   CMUX command option
cmux::options() {
    # If '--help' option has been already selected
    case "${comp_words[@]}" in
      *" -h "* | *" --help "*)
          return 0
      ;;
    esac

    # If only one command option can be selected
    case "${comp_words[2]}" in
      ssh-tmux|tssh)
        [[ "$current" -gt 3 ]] && return 0
        ;;
      manage-cloudera-scm-agent|scmagent)
        if [[ "$current" -eq 3 ]]; then
          scmagent_cmd=(
            "${(@f)$(
              cmux "${comp_words[2]}" --help |
              sed '1,/Scmagent commands:$/d;/^$/,$d;s/[^a-z_]/ /g' |
              xargs -n 1
            )}"
          )

          printf '%s\n' "${scmagent_cmd[@]}" |
          FZF_DEFAULT_OPTS="$_fzf_default_opts" \
          fzf --header="COMMAND" \
              --height="$(cmux::fzf::height "${#scmagent_cmd[@]}")" |
          awk '{print $1}'
          return 0
        fi
        ;;
    esac

    # Command options
    cmux_cmd_opts=(
      "${(@f)$(
        cmux ${comp_words[2]} --help | sed '1,/Options:$/d;/^$/,$d;s/^ *//g'
      )}"
    )

    # Remove selected option from command options
    for opt in "${cmux_cmd_opts[@]}"; do
      for comp_word in ${comp_words[3, -1]}; do
        if echo " $opt" | grep " $comp_word" > /dev/null; then
          cmux_cmd_opts=(${cmux_cmd_opts#$opt})
        fi
      done
    done

    printf '%s\n' "${cmux_cmd_opts[@]}" |
    FZF_DEFAULT_OPTS="$_fzf_default_opts" \
    fzf --header="OPTIONS" \
        --height="$(cmux::fzf::height "${#cmux_cmd_opts[@]}")" |
    awk '{print $2}'
}


# Perform CMUX command completion
#
# Globals:
#   current fzf_query_str comp_words
# Arguments:
#   None
# Returns:
#   None
cmux::completion () {
  local token

  # If index of current typing word is ...
  if [[ $current -eq 2 ]]; then
    token=$(cmux::commands)
  else
    token=$(cmux::options)
  fi

  # Remove query string from current line
  [[ -n $fzf_query_str ]] && comp_words="${comp_words[1, -2]} "

  # Redraw current line
  [[ -n "$token" ]] && LBUFFER="${comp_words[@]}$token "
  zle redisplay

  bindkey '^I' expand-or-complete
}

# CMUX interactive command completion for Z Shell
#
# Globals:
#   CURRENT words
# Arguments:
#   None
# Returns:
#   None
_cmux() {
  current=$CURRENT
  fzf_query_str="${words[$current]}"
  comp_words=("${words[@]}")

  zle -N cmux::completion
  bindkey '^I' cmux::completion
}
